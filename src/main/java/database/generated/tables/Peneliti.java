/*
 * This file is generated by jOOQ.
*/
package database.generated.tables;


import database.generated.DefaultSchema;
import database.generated.Keys;
import database.generated.tables.records.PenelitiRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Peneliti extends TableImpl<PenelitiRecord> {

    private static final long serialVersionUID = 1066185564;

    /**
     * The reference instance of <code>Peneliti</code>
     */
    public static final Peneliti PENELITI = new Peneliti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PenelitiRecord> getRecordType() {
        return PenelitiRecord.class;
    }

    /**
     * The column <code>Peneliti.ID</code>.
     */
    public final TableField<PenelitiRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Peneliti.ROLEID</code>.
     */
    public final TableField<PenelitiRecord, Integer> ROLEID = createField("ROLEID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Peneliti.BIO</code>.
     */
    public final TableField<PenelitiRecord, String> BIO = createField("BIO", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>Peneliti.PICTURE</code>.
     */
    public final TableField<PenelitiRecord, byte[]> PICTURE = createField("PICTURE", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>Peneliti</code> table reference
     */
    public Peneliti() {
        this(DSL.name("Peneliti"), null);
    }

    /**
     * Create an aliased <code>Peneliti</code> table reference
     */
    public Peneliti(String alias) {
        this(DSL.name(alias), PENELITI);
    }

    /**
     * Create an aliased <code>Peneliti</code> table reference
     */
    public Peneliti(Name alias) {
        this(alias, PENELITI);
    }

    private Peneliti(Name alias, Table<PenelitiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Peneliti(Name alias, Table<PenelitiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PenelitiRecord> getPrimaryKey() {
        return Keys.PK_PENELITI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PenelitiRecord>> getKeys() {
        return Arrays.<UniqueKey<PenelitiRecord>>asList(Keys.PK_PENELITI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PenelitiRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PenelitiRecord, ?>>asList(Keys.FK_PENELITI_ROLES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Peneliti as(String alias) {
        return new Peneliti(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Peneliti as(Name alias) {
        return new Peneliti(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Peneliti rename(String name) {
        return new Peneliti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Peneliti rename(Name name) {
        return new Peneliti(name, null);
    }
}
